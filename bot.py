import asyncio
import json
import os
import logging
from typing import Dict, Any, List
from datetime import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, 
    InputFile, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
# –ë–ï–†–ï–ú –¢–û–ö–ï–ù –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
BOT_TOKEN = os.getenv('BOT_TOKEN', '8446569923:AAGon_20FfR_w_8-WYtABwQI95QUe6rj34E')
ADMINS = ["Mister_Temich"]

# –ü–£–¢–ò –î–õ–Ø SCALINGO
DATA_DIR = os.getenv('DATA_DIR', 'data')
DB_FILE = os.path.join(DATA_DIR, "games.json")
USERS_FILE = os.path.join(DATA_DIR, "users.json")
BLOCKED_USERS_FILE = os.path.join(DATA_DIR, "blocked_users.json")

# –¢–µ–∫—Å—Ç—ã
START_TEXT = """üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameBot!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∏—Ö –≤ –ø–∏—Ä–∞—Ç—Å–∫–æ–π –∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"""
# ===============================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏ —Ñ–∞–π–ª–æ–≤
def init_files():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    try:
        os.makedirs(DATA_DIR, exist_ok=True)
        for file in [DB_FILE, USERS_FILE, BLOCKED_USERS_FILE]:
            if not os.path.exists(file):
                with open(file, "w", encoding="utf-8") as f:
                    json.dump({}, f, ensure_ascii=False, indent=2)
        logger.info("Files initialized successfully")
    except Exception as e:
        logger.error(f"Error initializing files: {e}")

# States –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_game_name = State()
    waiting_for_game_description = State()
    waiting_for_game_photo = State()
    waiting_for_game_file = State()
    waiting_for_original_url = State()
    waiting_for_username_to_block = State()
    waiting_for_username_to_unblock = State()

def is_admin(username: str | None) -> bool:
    return username in ADMINS if username else False

def load_json(file: str) -> Dict[str, Any]:
    try:
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"Error loading {file}: {e}")
        return {}

def save_json(data: Dict[str, Any], file: str):
    try:
        with open(file, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error saving {file}: {e}")

def save_user(user: types.User):
    users = load_json(USERS_FILE)
    user_id = str(user.id)
    
    if user_id not in users:
        users[user_id] = {
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "joined": datetime.now().isoformat()
        }
        save_json(users, USERS_FILE)

def is_user_blocked(user_id: int) -> bool:
    blocked_users = load_json(BLOCKED_USERS_FILE)
    return str(user_id) in blocked_users

def block_user(user_id: int):
    blocked_users = load_json(BLOCKED_USERS_FILE)
    blocked_users[str(user_id)] = datetime.now().isoformat()
    save_json(blocked_users, BLOCKED_USERS_FILE)

def unblock_user(user_id: int):
    blocked_users = load_json(BLOCKED_USERS_FILE)
    user_id_str = str(user_id)
    if user_id_str in blocked_users:
        del blocked_users[user_id_str]
        save_json(blocked_users, BLOCKED_USERS_FILE)

def get_user_id_by_username(username: str) -> int | None:
    users = load_json(USERS_FILE)
    for user_id, user_data in users.items():
        if user_data.get("username") == username:
            return int(user_id)
    return None

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_keyboard(user: types.User) -> ReplyKeyboardMarkup:
    buttons = [
        [KeyboardButton(text="üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä"), KeyboardButton(text="üíñ –î–æ–Ω–∞—Ç")],
    ]
    if is_admin(user.username):
        buttons.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

def get_back_to_main_inline_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]]
    )

def get_back_to_admin_inline_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin")]]
    )

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========
async def start_command(message: types.Message):
    save_user(message.from_user)
    
    if is_user_blocked(message.from_user.id):
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.", reply_markup=ReplyKeyboardRemove())
        return
    
    await message.answer(
        START_TEXT,
        reply_markup=get_main_keyboard(message.from_user)
    )

async def handle_main_menu_buttons(message: types.Message):
    if is_user_blocked(message.from_user.id):
        await message.answer("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        return
    
    if message.text == "üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä":
        await show_games_list(message)
    elif message.text == "üíñ –î–æ–Ω–∞—Ç":
        await show_donate(message)
    elif message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é":
        await show_admin_menu(message)

# ========== –§–£–ù–ö–¶–ò–û–ù–ê–õ –ò–ì–† ==========
async def show_games_list(message: types.Message):
    games = load_json(DB_FILE)
    
    if not games:
        await message.answer(
            "üì≠ –°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—ã.",
            reply_markup=get_back_to_main_inline_keyboard()
        )
        return
    
    keyboard = []
    for game_name in games.keys():
        keyboard.append([InlineKeyboardButton(text=game_name, callback_data=f"game_{game_name}")])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=markup)

async def handle_game_selection(callback: types.CallbackQuery):
    game_name = callback.data.split("_", 1)[1]
    games = load_json(DB_FILE)
    game = games.get(game_name)
    
    if not game:
        await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    keyboard = []
    if game.get("file"):
        keyboard.append([InlineKeyboardButton(text="üè¥‚Äç‚ò†Ô∏è –ü–∏—Ä–∞—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è", callback_data=f"pirate_{game_name}")])
    if game.get("original_url"):
        keyboard.append([InlineKeyboardButton(text="üõí –û—Ä–∏–≥–∏–Ω–∞–ª (–ª–∏—Ü–µ–Ω–∑–∏—è)", callback_data=f"original_{game_name}")])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_games_list")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    description = game.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    if game.get("photo"):
        photo_path = os.path.join(DATA_DIR, game["photo"])
        if os.path.exists(photo_path):
            try:
                with open(photo_path, 'rb') as photo_file:
                    await callback.message.answer_photo(
                        types.BufferedInputFile(photo_file.read(), filename="game_photo.jpg"),
                        caption=f"üéÆ <b>{game_name}</b>\n\n{description}\n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:",
                        reply_markup=markup,
                        parse_mode=ParseMode.HTML
                    )
                    return
            except Exception as e:
                logger.error(f"Error sending photo: {e}")
    
    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    await callback.message.edit_text(
        f"üéÆ <b>{game_name}</b>\n\n{description}\n\n‚û°Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:",
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )

async def handle_pirate_version(callback: types.CallbackQuery):
    game_name = callback.data.split("_", 1)[1]
    games = load_json(DB_FILE)
    game = games.get(game_name)
    
    if not game or not game.get("file"):
        await callback.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    file_name = game["file"]
    file_path = os.path.join(DATA_DIR, file_name)
    
    if not os.path.exists(file_path):
        await callback.message.edit_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
        return

    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    message = await callback.message.edit_text(f"‚è¨ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ¬´{game_name}¬ª\n[{' ' * 20}] 0%")
    
    steps = 10
    for i in range(1, steps + 1):
        percentage = i * 10
        filled = i * 2
        bar = "‚ñà" * filled + "‚ñí" * (20 - filled)
        
        try:
            await callback.message.edit_text(f"‚è¨ –ó–∞–≥—Ä—É–∑–∫–∞ ¬´{game_name}¬ª:\n[{bar}] {percentage}%")
        except Exception:
            pass
        
        await asyncio.sleep(0.3)

    await callback.message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
    
    try:
        original_filename = game.get("original_filename", file_name)
        with open(file_path, 'rb') as file:
            await callback.message.answer_document(
                types.BufferedInputFile(file.read(), filename=original_filename),
                caption=f"üéÆ <b>{game_name}</b> - –ü–∏—Ä–∞—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.",
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Error sending file: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

async def handle_original_version(callback: types.CallbackQuery):
    game_name = callback.data.split("_", 1)[1]
    games = load_json(DB_FILE)
    game = games.get(game_name)
    
    if not game or not game.get("original_url"):
        await callback.message.edit_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    url = game["original_url"]
    keyboard = [
        [InlineKeyboardButton(text=f"üõí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ¬´{game_name}¬ª (–ª–∏—Ü–µ–Ω–∑–∏—è)", url=url)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ", callback_data=f"game_{game_name}")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        f"üõí <b>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è ¬´{game_name}¬ª</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–∫—É–ø–∫–µ:",
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )

# ========== –î–û–ù–ê–¢ ==========
async def show_donate(message: types.Message):
    keyboard = [
        [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url="https://t.me/send?start=IV4FE5sinFii")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "üíñ <b>–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!</b>\n\n–í–∞—à–∏ –¥–æ–Ω–∞—Ç—ã –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∏–≥—Ä—ã.",
        reply_markup=markup,
        parse_mode=ParseMode.HTML
    )

# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========
async def show_admin_menu(message: types.Message):
    if not is_admin(message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton(text="üéÆ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="admin_add_game")],
        [InlineKeyboardButton(text="üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∏–≥—Ä–µ", callback_data="admin_add_photo_existing")],
        [InlineKeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ä–∞—Ç–∫—É –∫ –∏–≥—Ä–µ", callback_data="admin_add_pirate_existing")],
        [InlineKeyboardButton(text="üîó –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∫ –∏–≥—Ä–µ", callback_data="admin_add_original_existing")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", callback_data="admin_delete_game")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block_user")],
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unblock_user")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, parse_mode=ParseMode.HTML)

async def handle_admin_add_game(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üéÆ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]]
        )
    )
    await state.set_state(AdminStates.waiting_for_game_name)

async def handle_admin_add_photo_existing(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    games = load_json(DB_FILE)
    if not games:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∏–≥—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=get_back_to_admin_inline_keyboard())
        return
    
    keyboard = []
    for game_name in games.keys():
        keyboard.append([InlineKeyboardButton(text=game_name, callback_data=f"add_photo_{game_name}")])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    await callback.message.edit_text("üñº –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

async def handle_admin_add_pirate_existing(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    games = load_json(DB_FILE)
    if not games:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∏–≥—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=get_back_to_admin_inline_keyboard())
        return
    
    keyboard = []
    for game_name in games.keys():
        keyboard.append([InlineKeyboardButton(text=game_name, callback_data=f"add_pirate_{game_name}")])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    await callback.message.edit_text("üì§ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∏—Ä–∞—Ç—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

async def handle_admin_add_original_existing(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    games = load_json(DB_FILE)
    if not games:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∏–≥—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=get_back_to_admin_inline_keyboard())
        return
    
    keyboard = []
    for game_name in games.keys():
        keyboard.append([InlineKeyboardButton(text=game_name, callback_data=f"add_original_{game_name}")])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])
    await callback.message.edit_text("üîó –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

async def handle_add_photo_to_game(callback: types.CallbackQuery, state: FSMContext):
    game_name = callback.data.split("_", 2)[2]
    await state.update_data(game_name=game_name)
    await callback.message.edit_text(
        f"üñº –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è ¬´{game_name}¬ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]]
        )
    )
    await state.set_state(AdminStates.waiting_for_game_photo)

async def handle_add_pirate_to_game(callback: types.CallbackQuery, state: FSMContext):
    game_name = callback.data.split("_", 2)[2]
    await state.update_data(game_name=game_name)
    await callback.message.edit_text(
        f"üì§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ä–∞—Ç—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è ¬´{game_name}¬ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]]
        )
    )
    await state.set_state(AdminStates.waiting_for_game_file)

async def handle_add_original_to_game(callback: types.CallbackQuery, state: FSMContext):
    game_name = callback.data.split("_", 2)[2]
    await state.update_data(game_name=game_name)
    await callback.message.edit_text(
        f"üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è ¬´{game_name}¬ª. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]]
        )
    )
    await state.set_state(AdminStates.waiting_for_original_url)

async def handle_game_name_input(message: types.Message, state: FSMContext):
    await state.update_data(game_name=message.text)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]]
        )
    )
    await state.set_state(AdminStates.waiting_for_game_description)

async def handle_game_description_input(message: types.Message, state: FSMContext):
    await state.update_data(game_description=message.text)
    data = await state.get_data()
    game_name = data.get('game_name')
    game_description = data.get('game_description')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –±–µ–∑ —Ñ–∞–π–ª–∞ –∏ —Å—Å—ã–ª–∫–∏
    games = load_json(DB_FILE)
    games[game_name] = {
        "description": game_description,
        "added_by": message.from_user.username,
        "added_date": datetime.now().isoformat()
    }
    save_json(games, DB_FILE)

    await message.answer(
        f"‚úÖ –ò–≥—Ä–∞ ¬´{game_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –ø–∏—Ä–∞—Ç—Å–∫—É—é –∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é.",
        reply_markup=get_back_to_admin_inline_keyboard()
    )
    await state.clear()

async def handle_game_photo_input(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    
    data = await state.get_data()
    game_name = data.get('game_name')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    safe_file_name = f"{game_name}_photo.jpg"
    
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    full_file_path = os.path.join(DATA_DIR, safe_file_name)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await message.bot.download_file(file_path, full_file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ —Å–∫–∞—á–∞–ª–æ—Å—å
        if not os.path.exists(full_file_path):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ
        games = load_json(DB_FILE)
        if game_name not in games:
            games[game_name] = {}
        games[game_name]["photo"] = safe_file_name
        save_json(games, DB_FILE)
        
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ –¥–ª—è –∏–≥—Ä—ã ¬´{game_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=get_back_to_admin_inline_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error saving photo: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
    
    await state.clear()

async def handle_game_file_input(message: types.Message, state: FSMContext):
    if not message.document:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    
    data = await state.get_data()
    game_name = data.get('game_name')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_id = message.document.file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    original_file_name = message.document.file_name
    safe_file_name = f"{game_name}_{original_file_name}".replace(" ", "_").replace("/", "_")
    
    # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    full_file_path = os.path.join(DATA_DIR, safe_file_name)
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file_path, full_file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
        if not os.path.exists(full_file_path):
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ
        games = load_json(DB_FILE)
        if game_name not in games:
            games[game_name] = {}
        games[game_name]["file"] = safe_file_name
        games[game_name]["original_filename"] = original_file_name
        save_json(games, DB_FILE)
        
        await message.answer(
            f"‚úÖ –ü–∏—Ä–∞—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–≥—Ä—ã ¬´{game_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n"
            f"üìÅ –§–∞–π–ª: {original_file_name}",
            reply_markup=get_back_to_admin_inline_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error saving file: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    
    await state.clear()

async def handle_original_url_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    game_name = data.get('game_name')
    original_url = message.text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑–µ
    games = load_json(DB_FILE)
    if game_name not in games:
        games[game_name] = {}
    games[game_name]["original_url"] = original_url
    save_json(games, DB_FILE)
    
    await message.answer(
        f"‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∏–≥—Ä—ã ¬´{game_name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=get_back_to_admin_inline_keyboard()
    )
    await state.clear()

async def handle_admin_delete_game(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    games = load_json(DB_FILE)
    if not games:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_back_to_admin_inline_keyboard())
        return
    
    keyboard = []
    for game_name in games.keys():
        keyboard.append([InlineKeyboardButton(text=game_name, callback_data=f"delete_{game_name}")])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin")])
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text("üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", reply_markup=markup, parse_mode=ParseMode.HTML)

async def handle_game_deletion(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    game_name = callback.data.split("_", 1)[1]
    games = load_json(DB_FILE)
    
    if game_name in games:
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if games[game_name].get("file"):
            file_path = os.path.join(DATA_DIR, games[game_name]["file"])
            if os.path.exists(file_path):
                os.remove(file_path)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if games[game_name].get("photo"):
            photo_path = os.path.join(DATA_DIR, games[game_name]["photo"])
            if os.path.exists(photo_path):
                os.remove(photo_path)
        
        del games[game_name]
        save_json(games, DB_FILE)
        
        await callback.message.edit_text(
            f"‚úÖ –ò–≥—Ä–∞ ¬´{game_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=get_back_to_admin_inline_keyboard()
        )
    else:
        await callback.message.edit_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_back_to_admin_inline_keyboard())

async def handle_admin_list_users(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    users = load_json(USERS_FILE)
    blocked_users = load_json(BLOCKED_USERS_FILE)
    
    if not users:
        await callback.message.edit_text("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=get_back_to_admin_inline_keyboard())
        return
    
    user_list = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for i, (user_id, user_data) in enumerate(list(users.items())[:20], 1):
        username = user_data.get('username', '–Ω–µ—Ç username')
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        status = "üö´" if user_id in blocked_users else "‚úÖ"
        
        user_list += f"{i}. {status} {first_name} {last_name} (@{username})\n"
    
    user_list += f"\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
    user_list += f"\nüö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(blocked_users)}"
    
    if len(users) > 20:
        user_list += f"\n\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    
    await callback.message.edit_text(user_list, reply_markup=get_back_to_admin_inline_keyboard(), parse_mode=ParseMode.HTML)

async def handle_admin_block_user(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üö´ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ @):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]]
        )
    )
    await state.set_state(AdminStates.waiting_for_username_to_block)

async def handle_admin_unblock_user(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚úÖ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–±–µ–∑ @):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin")]]
        )
    )
    await state.set_state(AdminStates.waiting_for_username_to_unblock)

async def handle_username_to_block_input(message: types.Message, state: FSMContext):
    username = message.text.strip()
    user_id = get_user_id_by_username(username)
    
    if user_id:
        block_user(user_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=get_back_to_admin_inline_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_admin_inline_keyboard()
        )
    
    await state.clear()

async def handle_username_to_unblock_input(message: types.Message, state: FSMContext):
    username = message.text.strip()
    user_id = get_user_id_by_username(username)
    
    if user_id:
        unblock_user(user_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=get_back_to_admin_inline_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_back_to_admin_inline_keyboard()
        )
    
    await state.clear()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• CALLBACK'–û–í ==========
async def handle_back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(callback.from_user)
    )

async def handle_back_to_admin(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if not is_admin(callback.from_user.username):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    keyboard = [
        [InlineKeyboardButton(text="üéÆ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="admin_add_game")],
        [InlineKeyboardButton(text="üñº –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∏–≥—Ä–µ", callback_data="admin_add_photo_existing")],
        [InlineKeyboardButton(text="üì§ –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Ä–∞—Ç–∫—É –∫ –∏–≥—Ä–µ", callback_data="admin_add_pirate_existing")],
        [InlineKeyboardButton(text="üîó –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª –∫ –∏–≥—Ä–µ", callback_data="admin_add_original_existing")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", callback_data="admin_delete_game")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_block_user")],
        [InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unblock_user")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text("‚öôÔ∏è <b>–ê–¥–º–∏–Ω-–º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup, parse_mode=ParseMode.HTML)

async def handle_back_to_games_list(callback: types.CallbackQuery):
    await show_games_list(callback.message)

async def check_files_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message.from_user.username):
        return
    
    games = load_json(DB_FILE)
    if not games:
        await message.answer("üì≠ –ù–µ—Ç –∏–≥—Ä –≤ –±–∞–∑–µ.")
        return
    
    files_info = "üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:\n\n"
    
    for game_name, game_data in games.items():
        if game_data.get("file"):
            file_path = os.path.join(DATA_DIR, game_data["file"])
            if os.path.exists(file_path):
                file_size = os.path.getsize(file_path)
                files_info += f"‚úÖ {game_name}: –§–ê–ô–õ - {game_data['file']} ({file_size} –±–∞–π—Ç)\n"
            else:
                files_info += f"‚ùå {game_name}: –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù - {game_data['file']}\n"
        if game_data.get("photo"):
            photo_path = os.path.join(DATA_DIR, game_data["photo"])
            if os.path.exists(photo_path):
                photo_size = os.path.getsize(photo_path)
                files_info += f"üñº {game_name}: –§–û–¢–û - {game_data['photo']} ({photo_size} –±–∞–π—Ç)\n"
            else:
                files_info += f"‚ùå {game_name}: –§–û–¢–û –ù–ï –ù–ê–ô–î–ï–ù–û - {game_data['photo']}\n"
        if not game_data.get("file") and not game_data.get("photo"):
            files_info += f"üìù {game_name}: –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–æ—Ç–æ\n"
    
    await message.answer(files_info)

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    init_files()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or BOT_TOKEN == '8446569923:AAGon_20FfR_w_8-WYtABwQI95QUe6rj34E':
        logger.error("BOT_TOKEN not set properly!")
        return
    
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(start_command, Command("start"))
    dp.message.register(check_files_command, Command("checkfiles"))
    dp.message.register(handle_main_menu_buttons, F.text.in_(["üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä", "üíñ –î–æ–Ω–∞—Ç", "‚öôÔ∏è –ê–¥–º–∏–Ω-–º–µ–Ω—é"]))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∞
    dp.message.register(handle_game_name_input, AdminStates.waiting_for_game_name)
    dp.message.register(handle_game_description_input, AdminStates.waiting_for_game_description)
    dp.message.register(handle_game_photo_input, AdminStates.waiting_for_game_photo)
    dp.message.register(handle_game_file_input, AdminStates.waiting_for_game_file)
    dp.message.register(handle_original_url_input, AdminStates.waiting_for_original_url)
    dp.message.register(handle_username_to_block_input, AdminStates.waiting_for_username_to_block)
    dp.message.register(handle_username_to_unblock_input, AdminStates.waiting_for_username_to_unblock)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback'
    dp.callback_query.register(handle_back_to_main, F.data == "back_to_main")
    dp.callback_query.register(handle_back_to_admin, F.data == "back_to_admin")
    dp.callback_query.register(handle_back_to_games_list, F.data == "back_to_games_list")
    dp.callback_query.register(handle_game_selection, F.data.startswith("game_"))
    dp.callback_query.register(handle_pirate_version, F.data.startswith("pirate_"))
    dp.callback_query.register(handle_original_version, F.data.startswith("original_"))
    dp.callback_query.register(handle_admin_add_game, F.data == "admin_add_game")
    dp.callback_query.register(handle_admin_add_photo_existing, F.data == "admin_add_photo_existing")
    dp.callback_query.register(handle_admin_add_pirate_existing, F.data == "admin_add_pirate_existing")
    dp.callback_query.register(handle_admin_add_original_existing, F.data == "admin_add_original_existing")
    dp.callback_query.register(handle_add_photo_to_game, F.data.startswith("add_photo_"))
    dp.callback_query.register(handle_add_pirate_to_game, F.data.startswith("add_pirate_"))
    dp.callback_query.register(handle_add_original_to_game, F.data.startswith("add_original_"))
    dp.callback_query.register(handle_admin_delete_game, F.data == "admin_delete_game")
    dp.callback_query.register(handle_game_deletion, F.data.startswith("delete_"))
    dp.callback_query.register(handle_admin_list_users, F.data == "admin_list_users")
    dp.callback_query.register(handle_admin_block_user, F.data == "admin_block_user")
    dp.callback_query.register(handle_admin_unblock_user, F.data == "admin_unblock_user")

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Bot error: {e}")

if __name__ == "__main__":
    asyncio.run(main())